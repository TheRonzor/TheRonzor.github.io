<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">
    <title>Ummm yeah</title>
    <!-- script type="text/javascript" src="https://raw.github.com/jquery/sizzle/master/sizzle.js"></script -->
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.min.js"></script>
    <script src="https://d3js.org/d3-timer.v1.min.js"></script>
    <style type="text/css">
      body {
        font: 12px sans-serif;
      }
      .rules line, .rules path {
        shape-rendering: crispEdges;
        stroke: #000;
      }
      .rules .tick {
      }
      .rules .minor {
        stroke: #BBB;
      }
      .rules .domain {
        fill: none;
      }
      .grid .tick {
        stroke: #CCC;
      }
      .series path {
        fill: none;
        stroke: #348;
        stroke-width: 3px;
      }
    </style>
  </head>
  <body> <a href="index.html">Home</a>
    <div>
      <h1 style="text-align: center"> The Visual Fourier Transform </h1>
      <p style="text-align: center;"><img src="fourier_eq.png" alt="" style="width: 340px; height: 85px;"></p>
      <br>
      <p> The Fourier transform is a technique that can be used to extract the
        frequency content of a signal. But why does it work? </p>
      <p> The question we're asking is, "at what frequency does the signal
        repeat itself?". After thinking about that for a minute, you might
        realize that if we were to wrap the signal around a circle at one of its
        dominant frequencies, the picture would look like some curve laying on
        top of itself, since every time it reaches the same angle (phase) it
        will have the same value (amplitude, or distance from the origin). </p>
      <p> On the other hand, if we wrap the signal around a circle at some other
        frequency, then we'll get some sort of spirograh looking mess that, on
        average, will be centered around the origin. </p>
      <p> The visualization below is the function obtained before doing any
        integration. That is, it is the function we obtain when we multiply our
        signal by a unit circle at varying winding frequencies. </p>
      <p> The signal used in this example is </p>
      <p style="text-align: center;"><img src="fourier_input.png" alt="" style="width: 340px; height: auto;"></p>
      <p>
        When the winding frequency matches one of the actual frequencies (1,3, and 7) we expect to see the signal laying on top of itself,
        and the distance to the center of mass from the origin will be proportional to the amplitude of the signal at that frequency.  
        At other freqeuncies, the signal will not line up with itself, so the center of mass will be closer to the origin.
      </p>
      <p>
        Now you know! We're currently working on building interactive animations, so check back later for more fun stuff!
      </p>
    </div>
    <div>
      <script type="text/javascript">
				var w = 640;
        var h = 640;
        var xmin = -8;
        var xmax = 8;
        var ymin = -8;
        var ymax = 8;
        var tmax = 10;
        var x = d3.scale.linear().domain([xmin, xmax]).range([0,w]);
        var y = d3.scale.linear().domain([ymin, ymax]).range([h,0]);
        var t = d3.scale.linear().domain([0,tmax]).range([0,tmax]);
        var pad = 50;
        var svg = d3.select("body")
          .append("svg:svg")
          .attr("height", h + pad)
          .attr("width",  w + pad)
        	.attr("align", "center");
        var s = Math.sin
        var c = Math.cos
        const arrAvg = arr => arr.reduce((a,b) => a + b, 0) / arr.length
        var vis = svg.append("svg:g").attr("transform", "translate(40,20)");
        make_rules();
        var g = vis.append("svg:g").classed("series", true);
        var winding = 0;

        // Run the animation
        d3.timer(function(elapsed) {
          if (elapsed >200) {
            winding = winding+0.01;
            winding = winding % 10;
            d3.select("#lastCurve").remove();
            d3.select("#com").remove();
            d3.select("#TheTitle").remove();
            plot_fourier(winding);
            center_of_mass(winding);
            
						vis.append("text")
            	.attr("id", "TheTitle")
    					.attr("x", w/2 )
    					.attr("y", -5)
    					.style("text-anchor", "middle")
            	.style("font-size", "16px") 
    					.text("\u03c9 = " + Math.round(winding*100)/100);
          }
        });

        //vis.append("circle").attr("cx", x(0)).attr("cy", y(0)).attr("r",20).attr("fill","purple")

        function center_of_mass(w) {
          fx = xt(w);
          fy = yt(w);
          xvals = t.ticks(1000).map(function(ti) { return ( fx(ti) ) });
          yvals = t.ticks(1000).map(function(ti) { return ( fy(ti) ) });
          xmean = arrAvg(xvals);
          ymean = arrAvg(yvals);
          //svg.append("circle").attr("cx", x(xmean)+40).attr("cy", y(ymean)+20).attr("r",5).attr("fill","red").attr("id","com");
          vis.append("circle").attr("cx", x(xmean)).attr("cy", y(ymean)).attr("r",5).attr("fill","red").attr("id","com");
        }

        function plot_fourier(w) {
          fx = xt(w);
          fy = yt(w);
          g.append("svg:path").attr("id","lastCurve")
              .attr("d", function(d) { return d3.svg.line()(
                t.ticks(1000).map(function(ti) {
                  return [ x(fx(ti)), y(fy(ti)) ]
                })
               )})
        }      

        function xtest(k) {
          return ( function(ti) { return (ti) });
        }
        function ytest(k) {
          return ( function(ti) { return s(ti * k) });
        }

        function xt(k) {
          return ( function(t) { return ( MySignal(t) * c(k*t) )});
        }

        function yt(k) {
          return (function(t) { return ( MySignal(t) * s(k*t) )});
        }
        function MySignal(t) {
          return (s(t) +2*c(3*t) +3*s(7*t+5));
        }
        // Make ruler lines
        function make_rules() {
          var rules = vis.append("svg:g").classed("rules", true)

          function make_x_axis() {
            return d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .ticks(10)
          }

          function make_y_axis() {
            return d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(10)
          }

          rules.append("svg:g").classed("grid x_grid", true)
              .attr("transform", "translate(0,"+h+")")
              .call(make_x_axis()
                .tickSize(-h,0,0)
                .tickFormat("")
              )

          rules.append("svg:g").classed("grid y_grid", true)
              .call(make_y_axis()
                .tickSize(-w,0,0)
                .tickFormat("")
              )

          rules.append("svg:g").classed("labels x_labels", true)
              .attr("transform", "translate(0,"+h+")")
              .call(make_x_axis()
                .tickSize(5)
                // .tickFormat(d3.time.format("%Y/%m"))
              )

          rules.append("svg:g").classed("labels y_labels", true)
              .call(make_y_axis()
                .tickSubdivide(1)
                .tickSize(10, 5, 0)
              )
        }
      </script> </div>
    
  </body>
</html>
